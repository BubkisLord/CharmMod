<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ItemChanger</name>
    </assembly>
    <members>
        <member name="T:ItemChanger.GiveInfo">
            <summary>
            The parameters included when an item is given. May be null.
            </summary>
        </member>
        <member name="P:ItemChanger.GiveInfo.Container">
            <summary>
            The best description of the most specific container for this item.
            </summary>
        </member>
        <member name="P:ItemChanger.GiveInfo.FlingType">
            <summary>
            How geo and similar objects are allowed to be flung.
            </summary>
        </member>
        <member name="P:ItemChanger.GiveInfo.Transform">
            <summary>
            The transform to use for flinging and similar actions. May be null.
            </summary>
        </member>
        <member name="P:ItemChanger.GiveInfo.MessageType">
            <summary>
            A flag enumeration of the allowed message types for the UIDef after the item is given.
            </summary>
        </member>
        <member name="P:ItemChanger.GiveInfo.Callback">
            <summary>
            A callback set by the location or placement to be executed by the UIDef when its message is complete.
            </summary>
        </member>
        <member name="M:ItemChanger.GiveInfo.Clone">
            <summary>
            Returns a shallow clone of the GiveInfo.
            </summary>
        </member>
        <member name="T:ItemChanger.AbstractItem">
            <summary>
            The base class for all items.
            </summary>
        </member>
        <member name="F:ItemChanger.AbstractItem.name">
            <summary>
            The name of the item. Item names are not guaranteed to be unique.
            </summary>
        </member>
        <member name="F:ItemChanger.AbstractItem.UIDef">
            <summary>
            The UIDef associated to an item. GetResolvedUIDef() is preferred in most cases, since it accounts for the hooks which may modify the item.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.OnLoad">
            <summary>
            Method allowing derived item classes to initialize and place hooks.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.Load">
            <summary>
            Called on each item tied to a placement when the save is created or resumed.
            <br/>Execution order is (modules load -> placement tags load -> items load -> placements load)
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.OnUnload">
            <summary>
            Method allowing derived item classes to dispose hooks.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.Unload">
            <summary>
            Called on each item tied to a placement upon returning to the main menu.
            <br/>Execution order is (modules unload -> placement tags unload -> items unload -> placements unload)
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.GetPreferredContainer">
            <summary>
            Used by some placements to decide what container to use for the item. A value of "Unknown" is ignored, and usually leads to a shiny item by default.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.GiveEarly(System.String)">
            <summary>
            Indicates that the item can be given early in a special way from the given container.
            <br/> For example, SpawnGeoItem can be given early from Container.Chest by flinging geo directly from the chest.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.Redundant">
            <summary>
            Method used to determine if a unique item should be replaced (i.e. duplicates, etc). No relation to ObtainState.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ItemChanger.AbstractItem.Give(ItemChanger.AbstractPlacement,ItemChanger.GiveInfo)">
            <summary>
            The method called to give an item.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.GiveImmediate(ItemChanger.GiveInfo)">
            <summary>
            Specifies the effect of giving a particular item.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.GetResolvedUIDef(ItemChanger.AbstractPlacement)">
            <summary>
            Returns the UIDef of the item yielded after all of the events for modifying items.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.ResolveItem(ItemChanger.GiveEventArgs)">
            <summary>
            Determines the item yielded after all of the events for modifying items, by acting in place on the GiveEventArgs.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.RefreshObtained">
            <summary>
            Marks the item as available to be given again. Used, for example, with persistent and semipersistent items.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.SetObtained">
            <summary>
            Marks the item as obtained and no longer eligible to be given. Called by Give().
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.IsObtained">
            <summary>
            Returns whether the item is currently obtained. A value of true indicates the item is not eligible to be given.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ItemChanger.AbstractItem.WasEverObtained">
            <summary>
            Returns whether the item has ever been obtained, regardless of whether it is currently refreshed.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractItem.Clone">
            <summary>
            Returns a deep clone of the current item.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.BeforeGive">
            <summary>
            Event invoked by this item at the start of Give(), giving access to the initial give parameters.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.BeforeGiveGlobal">
            <summary>
            Event invoked by each item at the start of Give(), giving access to the initial give parameters.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.ModifyItem">
            <summary>
            Event invoked by this item during Give() to allow modification of any of the give parameters, including the item given.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.ModifyItemGlobal">
            <summary>
            Event invoked by each item during Give() to allow modification of any of the give parameters, including the item given.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.ModifyRedundantItem">
            <summary>
            Event invoked by this item after the ModifyItem events, if the resulting item is null or redundant.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.ModifyRedundantItemGlobal">
            <summary>
            Event invoked by each item after the ModifyItem events, if the resulting item is null or redundant.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.OnGive">
            <summary>
            Event invoked by this item just before GiveImmediate(), giving access to the final give parameters.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.OnGiveGlobal">
            <summary>
            Event invoked by each item just before GiveImmediate(), giving access to the final give parameters.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.AfterGive">
            <summary>
            Event invoked by this item just after GiveImmediate(), giving access to the final give parameters.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractItem.AfterGiveGlobal">
            <summary>
            Event invoked by each item just after GiveImmediate(), giving access to the final give parameters.
            </summary>
        </member>
        <member name="T:ItemChanger.AbstractLocation">
            <summary>
            The base class for all locations. Locations are used by placements to place items.
            <br/>Usually the location contains raw data and an implementation that may be customizable to an extent by the placement.
            </summary>
        </member>
        <member name="F:ItemChanger.AbstractLocation.name">
            <summary>
            The name of the location. Location names are often, but not always, distinct.
            </summary>
        </member>
        <member name="F:ItemChanger.AbstractLocation.sceneName">
            <summary>
            The scene name of the location. Locations can however make changes which affect more than one scene, and rarely may choose not to use this field.
            </summary>
        </member>
        <member name="F:ItemChanger.AbstractLocation.flingType">
            <summary>
            The flingType of the location, specifying how geo and similar objects are to be flung.
            </summary>
        </member>
        <member name="P:ItemChanger.AbstractLocation.Placement">
            <summary>
            The placement holding the location. This is usually set by the placement when the placement loads and before the location loads.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractLocation.Load">
            <summary>
            Called on a location by its placement, usually during AbstractPlacement.Load().
            <br/>Execution order is (modules load -> placement tags load -> items load -> placements load)
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractLocation.Unload">
            <summary>
            Called on a location by its placement, usually during AbstractPlacement.Unload().
            <br/>Execution order is (modules unload -> placement tags unload -> items unload -> placements unload)
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractLocation.OnLoad">
            <summary>
            Called during Load(). Allows the location to initialize and set up any hooks.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractLocation.OnUnload">
            <summary>
            Called during Unload(). Allows the location to dispose any hooks.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractLocation.Wrap">
            <summary>
            Creates a default placement for this location.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractLocation.Clone">
            <summary>
            Performs a deep clone of the location.
            </summary>
        </member>
        <member name="T:ItemChanger.AbstractPlacement">
            <summary>
            The base class for all placements. Placements carry a list of items and specify how to implement those items, often using locations.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.#ctor(System.String)">
            <summary>
            Creates a placement with the given name.
            </summary>
        </member>
        <member name="P:ItemChanger.AbstractPlacement.Name">
            <summary>
            The name of the placement. Placement names are enforced to be unique.
            </summary>
        </member>
        <member name="P:ItemChanger.AbstractPlacement.Items">
            <summary>
            The items attached to the placement.
            </summary>
        </member>
        <member name="P:ItemChanger.AbstractPlacement.Visited">
            <summary>
            An enumeration of visit flags accrued by the placement. Which flags may be set depends on the placement type and other factors.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.GiveAll(ItemChanger.GiveInfo,System.Action)">
            <summary>
            Helper method for giving all of the items of the placement in sequence, so that the UIDef message of one leads into giving the next.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.GetUIName">
            <summary>
            Combines and returns the preview names of the unobtained items at the placement. Used for most hints or previews.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.GetUIName(System.Int32)">
            <summary>
            Combines and returns the preview names of the unobtained items at the placement, trimmed to the specified length.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.AllObtained">
            <summary>
            Returns true when the placement currently has no items to give.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.AddVisitFlag(ItemChanger.VisitState)">
            <summary>
            Sets the visit state of the placement to the union of its current flags and the parameter flags.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.CheckVisitedAny(ItemChanger.VisitState)">
            <summary>
            Returns true if the flags have nonempty intersection with the placement's visit state.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.CheckVisitedAll(ItemChanger.VisitState)">
            <summary>
            Returns true if the flags are a subset of the placement's visit state.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.Load">
            <summary>
            Called on each saved placement when the save is created or resumed.
            <br/>Execution order is (modules load -> placement tags load -> items load -> placements load)
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.Unload">
            <summary>
            Called on each saved placement upon returning to main menu.
            <br/>Execution order is (modules unload -> placement tags unload -> items unload -> placements unload)
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.OnLoad">
            <summary>
            Called by Load(). Dispose hooks in OnUnload.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.OnUnload">
            <summary>
            Called by Unload().
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractPlacement.OnVisitStateChangedGlobal">
            <summary>
            Event invoked by each placement whenever new flags are added to its Visited. Skipped if added flags are a subset of Visited.
            </summary>
        </member>
        <member name="E:ItemChanger.AbstractPlacement.OnVisitStateChanged">
            <summary>
            Event invoked by this placement whenever AddVisitFlag is called. Use the NoChange property of the args to detect whether a change will occur.
            </summary>
        </member>
        <member name="P:ItemChanger.AbstractPlacement.MainContainerType">
            <summary>
            The container type that best describes the placement as a whole.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.Add(ItemChanger.AbstractItem)">
            <summary>
            Adds an item to the item list.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.Add(System.Collections.Generic.IEnumerable{ItemChanger.AbstractItem})">
            <summary>
            Adds a range of items to the item list.
            </summary>
        </member>
        <member name="M:ItemChanger.AbstractPlacement.Add(ItemChanger.AbstractItem[])">
            <summary>
            Adds a range of items to the item list.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.AccelerationMonitor">
            <summary>
            Component which tracks the per-frame acceleration of a RigidBody to determine whether it is falling.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.BigItemPopup">
            <summary>
            Component which creates a full-screen popup when an item is obtained.
            </summary>
        </member>
        <member name="M:ItemChanger.Components.BigItemPopup.Show(UnityEngine.Sprite,System.String,System.String,System.String,ButtonSkin,System.String,System.String,System.Action)">
            <summary>
            Creates a BigItemPopup with the given parameters. All parameters can be null except the sprite and name.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.ContainerInfo">
            <summary>
            Component to be attached to a container GameObject to allow the Container class to make changes.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.ContainerGiveInfo">
            <summary>
            Instructions for a container to give items.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.ChangeSceneInfo">
            <summary>
            Instructions for a container to change scene.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.CostInfo">
            <summary>
            Instructions for a container to enforce a Cost.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.DropIntoPlace">
            <summary>
            Component which causes a RigidBody to fall vertically and lock position when it lands.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.HintBox">
            <summary>
            A component which displays custom dream text when triggered by proximity.
            </summary>
        </member>
        <member name="M:ItemChanger.Components.HintBox.Create(UnityEngine.Vector2,System.Func{System.String},System.Func{System.Boolean},System.Action{System.String})">
            <summary>
            Create a HintBox at the specified position with the specified delegates.
            </summary>
        </member>
        <member name="M:ItemChanger.Components.HintBox.Create(UnityEngine.Transform,ItemChanger.AbstractPlacement)">
            <summary>
            Create a HintBox at the position of the transform using the placement's GetUIName, AllObtained, and AddVisitFlag(VisitState.Previewed) methods.
            </summary>
        </member>
        <member name="M:ItemChanger.Components.HintBox.Create(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates a HintBox of specified position and size. The delegate fields of the HintBox are not set.
            </summary>
        </member>
        <member name="T:ItemChanger.Components.ModShopItemStats">
            <summary>
            A component which is specially handled by ShopLocation to be used as a shop item.
            </summary>
        </member>
        <member name="T:ItemChanger.Container">
            <summary>
            Base class for types which implement creating and fsm-editing item containers.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.GetContainer(System.String)">
            <summary>
            Gets the container definition for the given string. Returns null if no such container has been defined.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.DefineContainer(ItemChanger.Container)">
            <summary>
            Adds or overwrites the container definition in the internal dictionary.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.DefineContainer``1">
            <summary>
            Adds or overwrites the container definition in the internal dictionary.
            </summary>
        </member>
        <member name="P:ItemChanger.Container.Name">
            <summary>
            The unique name of the container.
            </summary>
        </member>
        <member name="P:ItemChanger.Container.SupportsCost">
            <summary>
            Returns true if the container has a natural way to present a cost.
            For example, Container.Shiny supports cost through the YN dialogue box.
            </summary>
        </member>
        <member name="P:ItemChanger.Container.SupportsSceneChange">
            <summary>
            Returns true if the container has a natural way to start a scene transition after giving items.
            </summary>
        </member>
        <member name="P:ItemChanger.Container.SupportsDrop">
            <summary>
            Returns true if the container has a natural way to be dropped from midair.
            </summary>
        </member>
        <member name="P:ItemChanger.Container.SupportsInstantiate">
            <summary>
            Returns true if the container can be instantiated. For some containers, this value is variable in which objects were preloaded.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.GetNewContainer(ItemChanger.AbstractPlacement,System.Collections.Generic.IEnumerable{ItemChanger.AbstractItem},ItemChanger.FlingType,ItemChanger.Cost,System.Nullable{ItemChanger.Transition})">
            <summary>
            Produces a new object of this container type.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.ApplyTargetContext(UnityEngine.GameObject,UnityEngine.GameObject,System.Single)">
            <summary>
            Puts the container in the same position and hierarchy of the target, up to the elevation correction in y.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.ApplyTargetContext(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Puts the container in the specified position, up to the elevation correction in y.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.OnEnable(PlayMakerFSM)">
            <summary>
            Fsm hook for all container edits. Called on an item with the ContainerInfo component at the start and end of ItemChanger's PlayMakerFSM.OnEnable hook.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.AddGiveEffectToFsm(PlayMakerFSM,ItemChanger.Components.ContainerGiveInfo)">
            <summary>
            Called during the container fsm hook to set up the container to give items.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.AddChangeSceneToFsm(PlayMakerFSM,ItemChanger.Components.ChangeSceneInfo)">
            <summary>
            Called during the container fsm hook to set up the container to change scene.
            </summary>
        </member>
        <member name="M:ItemChanger.Container.AddCostToFsm(PlayMakerFSM,ItemChanger.Components.CostInfo)">
            <summary>
            Called during the container fsm hook to set up the container to have a cost.
            </summary>
        </member>
        <member name="T:ItemChanger.Containers.ChestContainer">
            <summary>
            Container for creating and modifying chests.
            </summary>
        </member>
        <member name="T:ItemChanger.Containers.GeoRockContainer">
            <summary>
            Container for creating and modifying geo rocks.
            </summary>
        </member>
        <member name="T:ItemChanger.Containers.GrubJarContainer">
            <summary>
            Container for creating and modifying grubs.
            </summary>
        </member>
        <member name="T:ItemChanger.Containers.MimicContainer">
            <summary>
            Container for creating and modifying mimics.
            </summary>
        </member>
        <member name="T:ItemChanger.Containers.ShinyContainer">
            <summary>
            Container for creating and modifying shiny items.
            </summary>
        </member>
        <member name="M:ItemChanger.Containers.SoulTotemContainer.AddGiveEffectToFsm(PlayMakerFSM,ItemChanger.Components.ContainerGiveInfo)">
            <remarks>
            Soul totems are implemented as follows:
            - The totem type is the type of the first SoulTotemItem in the items list, or B if no SoulTotemItems were included. It is also B if Soul Totem preloads were reduced.
            - The number of hits of the totem is the sum of the number of hits of each of the SoulTotemItems. If any of the SoulTotemItems have a negative number of hits, the totem is infinite.
            - The totem spawns non-soul items as shinies on the first hit. If the totem is depleted but has items, it will still spawn items on the first hit, but not give soul.
            - Soul items also count as given after the first hit. If all of the items on the soul totem have been obtained at least once, the totem becomes tinted orange.
            - The number of hits left on the totem is saved by its PersistentIntItem component.
            </remarks>
        </member>
        <member name="T:ItemChanger.Containers.TabletContainer">
            <summary>
            Container for creating and modifying lore tablets.
            </summary>
        </member>
        <member name="T:ItemChanger.Cost">
            <summary>
            Data type used generally for cost handling, including in shops and y/n dialogue prompts.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.CanPay">
            <summary>
            Returns whether the cost can currently be paid.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.Pay">
            <summary>
            Pays the cost, performing any effects and setting the cost to Paid.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.OnPay">
            <summary>
            Method for administering all effects of the cost during Pay.
            </summary>
        </member>
        <member name="P:ItemChanger.Cost.Paid">
            <summary>
            Represents whether the cost has been paid yet. Paid costs will be subsequently ignored.
            </summary>
        </member>
        <member name="P:ItemChanger.Cost.DiscountRate">
            <summary>
            A number between 0 and 1 which modifies numeric costs. Only considered by some costs.
            <br/>For example, the Leg Eater dung discount sets this to 0.8, to indicate that geo costs should be at 80% price.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.GetCostText">
            <summary>
            Method which provides the cost text used in y/n prompts.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.GetShopCostText">
            <summary>
            Method which provides the description of the cost displayed below the item description in the shop window.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.GetDisplayGeo">
            <summary>
            Controls the number displayed in shops, etc.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.Includes(ItemChanger.Cost)">
            <summary>
            Is the other cost a subset of this cost?
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.HasPayEffects">
            <summary>
            Does paying this cost have effects (particularly that could prevent paying other costs of the same type)?
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.Load">
            <summary>
            Method which should be called by the Cost's owner during initial loading. Used by certain costs which require global or shared tracking.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.Unload">
            <summary>
            Method which should be called by the Cost's owner during unloading. Used by certain costs which require global or shared tracking.
            </summary>
        </member>
        <member name="M:ItemChanger.Cost.op_Addition(ItemChanger.Cost,ItemChanger.Cost)">
            <summary>
            Combines two costs into a MultiCost. If either argument is null, returns the other argument.  If one or both costs is a MultiCost, flattens the result.
            </summary>
        </member>
        <member name="T:ItemChanger.MultiCost">
            <summary>
            Cost which is the concatenation of other costs. Can only be paid if all of its costs can be paid, and pays all its costs sequentially.
            </summary>
        </member>
        <member name="T:ItemChanger.PDBoolCost">
            <summary>
            Cost which has no pay effects, but can only be paid when the specified PlayerData bool is true.
            </summary>
        </member>
        <member name="M:ItemChanger.PDBoolCost.#ctor(System.String,System.String)">
            <summary>
            Cost which has no pay effects, but can only be paid when the specified PlayerData bool is true.
            </summary>
        </member>
        <member name="T:ItemChanger.PDIntCost">
            <summary>
            Cost which has no pay effects, but can only be paid when the specified PlayerData int comparison succeeds.
            </summary>
        </member>
        <member name="M:ItemChanger.PDIntCost.#ctor(System.Int32,System.String,System.String,ItemChanger.ComparisonOperator)">
            <summary>
            Cost which has no pay effects, but can only be paid when the specified PlayerData int comparison succeeds.
            </summary>
        </member>
        <member name="T:ItemChanger.ConsumablePDIntCost">
            <summary>
            Cost which subtracts the specified amount from the specified PlayerData int. Can only be paid when the result of the subtraction would be nonnegative.
            </summary>
        </member>
        <member name="M:ItemChanger.ConsumablePDIntCost.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Cost which subtracts the specified amount from the specified PlayerData int. Can only be paid when the result of the subtraction would be nonnegative.
            </summary>
        </member>
        <member name="T:ItemChanger.GeoCost">
            <summary>
            Cost which subtracts the specified amount from the GeoCounter. Can only be paid when the result of the subtraction would be nonnegative.
            </summary>
        </member>
        <member name="M:ItemChanger.GeoCost.#ctor(System.Int32)">
            <summary>
            Cost which subtracts the specified amount from the GeoCounter. Can only be paid when the result of the subtraction would be nonnegative.
            </summary>
        </member>
        <member name="P:ItemChanger.IDeployer.SceneName">
            <summary>
            Used as a key for the scene change event, and thus should not mutate.
            </summary>
        </member>
        <member name="T:ItemChanger.MessageType">
            <summary>
            Enum used to communicate compatibility with different UIDef types.
            </summary>
        </member>
        <member name="F:ItemChanger.MessageType.Corner">
            <summary>
            A message which shows a sprite and text in the bottom-left corner without taking control.
            </summary>
        </member>
        <member name="F:ItemChanger.MessageType.Big">
            <summary>
            A message which takes control and shows a fullscreen popup.
            </summary>
        </member>
        <member name="F:ItemChanger.MessageType.Lore">
            <summary>
            A message which takes control and starts a dialogue prompt.
            </summary>
        </member>
        <member name="T:ItemChanger.ObtainState">
            <summary>
            Enum for the current state of an item, to determine whether it has been given and whether it is eligible to be given.
            </summary>
        </member>
        <member name="F:ItemChanger.ObtainState.Unobtained">
            <summary>
            The item has never been given, and is eligible to be given.
            </summary>
        </member>
        <member name="F:ItemChanger.ObtainState.Obtained">
            <summary>
            The item has been given, and is no longer eligible to be given.
            </summary>
        </member>
        <member name="F:ItemChanger.ObtainState.Refreshed">
            <summary>
            The item was previously given, but it has been refreshed and is reeligible to be given.
            </summary>
        </member>
        <member name="F:ItemChanger.VisitState.Previewed">
            <summary>
            Applies to shops, placements with preview dialogues, and placements with hint boxes.
            </summary>
        </member>
        <member name="F:ItemChanger.VisitState.Opened">
            <summary>
            Corresponds to opening a container: e.g. opening a chest, breaking a grub jar or geo rock, etc.
            </summary>
        </member>
        <member name="F:ItemChanger.VisitState.Dropped">
            <summary>
            Applies to enemy drop items.
            </summary>
        </member>
        <member name="F:ItemChanger.VisitState.Accepted">
            <summary>
            Applies to placements offered by NPCs (Cornifer, Nailmasters). Usually set to indicate that the NPC is no longer required to make the offer when items respawn.
            </summary>
        </member>
        <member name="F:ItemChanger.VisitState.Special">
            <summary>
            Defined on a per-placement basis.
            </summary>
        </member>
        <member name="T:ItemChanger.Persistence">
            <summary>
            Enum for controlling respawn behavior of items.
            </summary>
        </member>
        <member name="F:ItemChanger.Persistence.Single">
            <summary>
            Indicates the item should not be respawned.
            </summary>
        </member>
        <member name="F:ItemChanger.Persistence.SemiPersistent">
            <summary>
            Indicates the item should be respawned when the game resets semipersistent items (on bench, death, and a few world events).
            </summary>
        </member>
        <member name="F:ItemChanger.Persistence.Persistent">
            <summary>
            Indicates the item should be respawned after any scene load.
            </summary>
        </member>
        <member name="T:ItemChanger.DropType">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="T:ItemChanger.FlingType">
            <summary>
            Enum for controlling how items (particularly geo) should be flung from a location.
            </summary>
        </member>
        <member name="F:ItemChanger.FlingType.Everywhere">
            <summary>
            Any fling behavior is acceptable.
            </summary>
        </member>
        <member name="F:ItemChanger.FlingType.StraightUp">
            <summary>
            Items should not be flung horizontally.
            </summary>
        </member>
        <member name="F:ItemChanger.FlingType.DirectDeposit">
            <summary>
            Items should not be flung at all.
            </summary>
        </member>
        <member name="T:ItemChanger.ShinyFling">
            <summary>
            Enum for controlling how a shiny should be flung when activated.
            </summary>
        </member>
        <member name="F:ItemChanger.ShinyFling.Down">
            <summary>
            The shiny should fall straight down.
            </summary>
        </member>
        <member name="F:ItemChanger.ShinyFling.Left">
            <summary>
            The shiny should be flung to the left.
            </summary>
        </member>
        <member name="F:ItemChanger.ShinyFling.Right">
            <summary>
            The shiny should be flung to the right.
            </summary>
        </member>
        <member name="F:ItemChanger.ShinyFling.RandomLR">
            <summary>
            The shiny should be flung to the left or right, randomly.
            </summary>
        </member>
        <member name="T:ItemChanger.PlacementConflictResolution">
            <summary>
            Enum for controlling what should happen when a placement is added, and another placement with the same name already exists in settings.
            </summary>
        </member>
        <member name="F:ItemChanger.PlacementConflictResolution.MergeKeepingNew">
            <summary>
            Keep new placement, discard old placement, and append items of old placement to new placement.
            </summary>
        </member>
        <member name="F:ItemChanger.PlacementConflictResolution.MergeKeepingOld">
            <summary>
            Keep old placement, discard new placement, and append items of new placement to old placement.
            </summary>
        </member>
        <member name="F:ItemChanger.PlacementConflictResolution.Replace">
            <summary>
            Keep new placement, discard old placement
            </summary>
        </member>
        <member name="F:ItemChanger.PlacementConflictResolution.Ignore">
            <summary>
            Keep old placement, discard new placement
            </summary>
        </member>
        <member name="F:ItemChanger.PlacementConflictResolution.Throw">
            <summary>
            A duplicate placement will result in an ArgumentException.
            </summary>
        </member>
        <member name="T:ItemChanger.SpecialStartEffects">
            <summary>
            Enum for adding special behvaior to the respawn marker tied to a StartDef.
            </summary>
        </member>
        <member name="T:ItemChanger.GeoRockSubtype">
            <summary>
            Enum used to refer to the different geo rock prefabs that are supported.
            </summary>
        </member>
        <member name="T:ItemChanger.SoulTotemSubtype">
            <summary>
            Enum used to refer to the different soul totem prefabs that are supported.
            </summary>
        </member>
        <member name="T:ItemChanger.TextType">
            <summary>
            Enum for describing the text alignment and background of a lore tablet.
            </summary>
        </member>
        <member name="F:ItemChanger.TextType.LeftLore">
            <summary>
            Left-aligned text with a normal text box background.
            </summary>
        </member>
        <member name="F:ItemChanger.TextType.Lore">
            <summary>
            Centered text with a normal text box background. Describes the majority of lore tablets.
            </summary>
        </member>
        <member name="F:ItemChanger.TextType.MajorLore">
            <summary>
            Cenetered text with a special lore prompt background. Used by tablets in King's Pass, Howling Cliffs, Abyss, and Black Egg Temple.
            </summary>
        </member>
        <member name="T:ItemChanger.DefaultShopItems">
            <summary>
            Flags enum used to specify items that should not be removed from a shop by a ShopLocation.
            </summary>
        </member>
        <member name="T:ItemChanger.SeerRewards">
            <summary>
            Flags enum used to specify a subset of rewards from the Seer.
            </summary>
        </member>
        <member name="T:ItemChanger.GrubfatherRewards">
            <summary>
            Flags enum used to specify a subset of rewards from Grubfather.
            </summary>
        </member>
        <member name="T:ItemChanger.ComparisonOperator">
            <summary>
            Enum used to specify an operation for comparing two numbers.
            </summary>
        </member>
        <member name="T:ItemChanger.Events">
            <summary>
            The main class in ItemChanger for organizing events. Some specific events are defined in AbstractPlacement and AbstractItem instead.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnStringGet">
            <summary>
            Universal hook for editing ItemChanger text.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnSpriteGet">
            <summary>
            Universal hook for editing ItemChanger sprites.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnTransitionOverride">
            <summary>
            Called whenever a transition is overriden through ItemChanger, giving access to the original transition data and the result of the override.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnBeginSceneTransition">
            <summary>
            Called immediately prior to the BeginSceneTransition routine. If transition overrides take place through ItemChanger, these are applied before the event is invoked.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.BeforeStartNewGame">
            <summary>
            Called before GameManager.StartNewGame.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.AfterStartNewGame">
            <summary>
            Called after GameManager.StartNewGame.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnItemChangerHook">
            <summary>
            Called after ItemChanger hooks, which occurs either when ItemChanger settings are created or when ItemChanger settings are loaded from a save file.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnItemChangerUnhook">
            <summary>
            Called after ItemChanger unhooks, which occurs when ItemChanger settings are nulled on returning to menu.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnEnterGame">
            <summary>
            Called on starting or continuing a save.
            <br/>If continuing or starting with a custom start, it is called before GM.ContinueGame.
            <br/>If starting with the base start, it is called before GM.StartNewGame.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnPersistentUpdate">
            <summary>
            Called after persistent items reset, on every active scene change.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnSceneChange">
            <summary>
            Called on every active scene change with the new scene as parameter.
            </summary>
        </member>
        <member name="E:ItemChanger.Events.OnSemiPersistentUpdate">
            <summary>
            Called after semipersistent data resets, i.e. on bench, death, special cutscenes, etc.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.AddFsmEdit(ItemChanger.FsmID,System.Action{PlayMakerFSM})">
            <summary>
            The action will be invoked on any fsm matching the id.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.RemoveFsmEdit(ItemChanger.FsmID,System.Action{PlayMakerFSM})">
            <summary>
            Removes the action from the global hook associated to the FsmID.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.AddFsmEdit(System.String,ItemChanger.FsmID,System.Action{PlayMakerFSM})">
            <summary>
            The action will be invoked on any fsm matching the id in the specified scene.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.RemoveFsmEdit(System.String,ItemChanger.FsmID,System.Action{PlayMakerFSM})">
            <summary>
            Removes the action from the scene-specific hook associated to the FsmID.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.AddSceneChangeEdit(System.String,System.Action{UnityEngine.SceneManagement.Scene})">
            <summary>
            The action will be invoked whenever sceneName becomes the name of the active scene.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.RemoveSceneChangeEdit(System.String,System.Action{UnityEngine.SceneManagement.Scene})">
            <summary>
            Removes the action from the scene-specific active scene hook.
            </summary>
        </member>
        <member name="T:ItemChanger.Events.TransitionOverrideListener">
            <summary>
            Delegate type used to communicate when a transition is overriden.
            </summary>
        </member>
        <member name="T:ItemChanger.Events.LanguageEdit">
            <summary>
            Delegate type which allows subscriber to optionally edit the input string.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.AddLanguageEdit(ItemChanger.LanguageKey,ItemChanger.Events.LanguageEdit)">
            <summary>
            Hooks LanguageGet for the given key.
            </summary>
        </member>
        <member name="M:ItemChanger.Events.RemoveLanguageEdit(ItemChanger.LanguageKey,ItemChanger.Events.LanguageEdit)">
            <summary>
            Unhooks LanguageGet for the given key.
            </summary>
        </member>
        <member name="T:ItemChanger.Extensions.Extensions">
            <summary>
            Miscellaneous extensions, primarily on System types.
            </summary>
        </member>
        <member name="M:ItemChanger.Extensions.Extensions.AnyEverObtained(System.Collections.Generic.IEnumerable{ItemChanger.AbstractItem})">
            <summary>
            Returns true when the collection has a previously given item, or is null or empty.
            </summary>
        </member>
        <member name="T:ItemChanger.Extensions.PlayMakerExtensions">
            <summary>
            Extensions for interacting with and modifying FSMs.
            </summary>
        </member>
        <member name="T:ItemChanger.Extensions.UnityExtensions">
            <summary>
            Extensions for Unity objects, and particularly for interacting with Scenes.
            </summary>
        </member>
        <member name="M:ItemChanger.Extensions.UnityExtensions.FindGameObject(UnityEngine.SceneManagement.Scene,System.String)">
            <summary>
            Finds a GameObject in the given scene by its full path.
            </summary>
            <param name="s"></param>
            <param name="path">The full path to the GameObject, with forward slash ('/') separators.</param>
            <returns></returns>
        </member>
        <member name="M:ItemChanger.Extensions.UnityExtensions.FindGameObjectByName(UnityEngine.SceneManagement.Scene,System.String)">
            <summary>
            Breadth first search through the entire hierarchy. Returns the first GameObject with the given name, or null.
            </summary>
        </member>
        <member name="M:ItemChanger.Extensions.UnityExtensions.Traverse(UnityEngine.SceneManagement.Scene)">
            <summary>
            Returns a list of objects in the scene hierarchy, ordered by depth-first-search.
            <br/>The list consists of pairs where the first entry is the object path and the second entry is the object.
            </summary>
        </member>
        <member name="M:ItemChanger.Extensions.UnityExtensions.FindChildInHierarchy(UnityEngine.GameObject,System.String)">
            <summary>
            Breadth first search. Returns GameObject with given name, or null if not found. Parent object not included in search.
            </summary>
        </member>
        <member name="E:ItemChanger.Finder.GetItemOverride">
            <summary>
            Invoked by Finder.GetItem. The initial arguments are the requested name, and null. If the event finishes with a non-null item, that item is returned to the requester.
            <br/>Otherwise, the ItemChanger internal implementation of that item is cloned and returned, if it exists. Otherwise, null is returned.
            </summary>
        </member>
        <member name="E:ItemChanger.Finder.GetLocationOverride">
            <summary>
            Invoked by Finder.GetLocation. The initial arguments are the requested name, and null. If the event finishes with a non-null location, that location is returned to the requester.
            <br/>Otherwise, the ItemChanger internal implementation of that location is cloned and returned, if it exists. Otherwise, null is returned.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetItem(System.String)">
            <summary>
            The most general method for looking up an item. Invokes an event to allow subscribers to modify the search result. Return value defaults to that of GetItemInternal.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetItemFromSheet(System.String,System.Int32)">
            <summary>
            Finds the itme by name in the sheet with the requested index, and returns a clone of the item. Returns null if the item was not found.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetItemFromSheet(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Searches for the item by name among the requested sheets, and returns a clone of the item from the first sheet with a match. Returns null if the item was not found.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetItemInternal(System.String)">
            <summary>
            Searches for the item by name, first in the CustomItems list, then in the list of extra sheets held by GlobalSettings, and finally in the default item sheet. Returns null if not found.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetLocation(System.String)">
            <summary>
            The most general method for looking up a location. Invokes an event to allow subscribers to modify the search result. Return value defaults to that of GetLocationInternal.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetLocationFromSheet(System.String,System.Int32)">
            <summary>
            Finds the location by name in the sheet with the requested index, and returns a clone of the location. Returns null if the location was not found.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetLocationFromSheet(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Searches for the location by name among the requested sheets, and returns a clone of the location from the first sheet with a match. Returns null if the location was not found.
            </summary>
        </member>
        <member name="M:ItemChanger.Finder.GetLocationInternal(System.String)">
            <summary>
            Searches for the location by name, first in the CustomLocations list, then in the list of extra sheets held by GlobalSettings, and finally in the default location sheet. Returns null if not found.
            </summary>
        </member>
        <member name="M:ItemChanger.FsmID.#ctor(System.String)">
            <summary>
            Create an FsmID which matches any object with this FsmName.
            </summary>
        </member>
        <member name="M:ItemChanger.FsmID.#ctor(System.String,System.String)">
            <summary>
            Create an FsmID which matches any object with this ObjectName and FsmName.
            </summary>
        </member>
        <member name="M:ItemChanger.FsmID.#ctor(PlayMakerFSM)">
            <summary>
            Create an FsmID which matches any object with the same ObjectName and FsmName as the fsm.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.AsyncLambda">
            <summary>
            FsmStateAction which invokes a delegate with a callback parameter, used to finish the action or trigger an event.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.ChangeSceneAction">
            <summary>
            FsmStateAction for triggering a scene transition from within an fsm.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.DelegateBoolTest">
            <summary>
            FsmStateAction which invokes a supplied test to choose an FsmEvent.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.FlingGeoAction">
            <summary>
            FsmStateAction with static methods for flinging geo from a transform.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.FlingSoulAction">
            <summary>
            FsmStateAction with static methods for flinging soul from a transform.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.Lambda">
            <summary>
            FsmStateAction which invokes a delegate.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.LambdaEveryFrame">
            <summary>
            Invoke the supplied method every frame.
            </summary>
        </member>
        <member name="T:ItemChanger.FsmStateActions.SetHardSaveAction">
            <summary>
            FsmStateAction for setting the player's respawn point to the RespawnPoint found in the active scene.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.LanguageStringManager.GetICString(System.String,System.String)">
            <summary>
            Returns the string with the given sheet and key from the languge.xml. Does not do any other search, nor does it invoke Language.Language.Get, nor does it format the result.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuHelper.CreateMenuBuilder(System.String,MenuScreen,UnityEngine.UI.MenuButton@)">
            <summary>
            Creates a MenuBuilder object with the default size and position data, but no content.
            </summary>
            <param name="title">The title of the menu screen.</param>
            <param name="returnScreen">The screen that the back button will return to.</param>
            <param name="backButton">The back button.</param>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuHelper.CreateMenuScreen(System.String,MenuScreen,System.Collections.Generic.IReadOnlyList{Modding.IMenuMod.MenuEntry})">
            <summary>
            Creates a Menu Screen with a list of MenuOptionHorizontals, with the default size and position data.
            </summary>
            <param name="title">The title of the menu screen.</param>
            <param name="returnScreen">The screen that the back button will return to.</param>
            <param name="entries">A list of IMenuMod.MenuEntry objects corresponding to the buttons.</param>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuHelper.AddMenuEntriesToContentArea(Modding.Menu.ContentArea,System.Collections.Generic.IReadOnlyList{Modding.IMenuMod.MenuEntry},MenuScreen)">
            <summary>
            Adds the menu entries to the content area.
            </summary>
        </member>
        <member name="T:ItemChanger.Internal.Menu.ModMenuScreenBuilder">
            <summary>
            Provides a simple way to create menu screens, that supports adding subpages and IMenuMod.MenuEntries
            with the default size and position data.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuScreenBuilder.AddSubpage(System.String,System.String,System.Collections.Generic.IReadOnlyList{Modding.IMenuMod.MenuEntry})">
            <summary>
            Adds a button which proceeds to a subpage consisting of a list of MenuOptionHorizontals.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuScreenBuilder.AddSubpage(System.String,System.String,MenuScreen)">
            <summary>
            Adds a button which proceeds to a subpage.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuScreenBuilder.AddHorizontalOption(Modding.IMenuMod.MenuEntry)">
            <summary>
            Adds a horizontal option.
            </summary>
            <param name="entry">The struct containing the data for the menu entry.</param>
        </member>
        <member name="M:ItemChanger.Internal.Menu.ModMenuScreenBuilder.AddButton(System.String,System.String,System.Action)">
            <summary>
            Adds a clickable button which executes a custom action on click.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.ModuleCollection.Get``1">
            <summary>
            Returns the first module of type T, or default.
            </summary>
        </member>
        <member name="T:ItemChanger.Internal.SoundManager">
            <summary>
            Class for managing loading and caching of AudioClips from wav files.
            </summary>
        </member>
        <member name="P:ItemChanger.Internal.SoundManager.Instance">
            <summary>
            The SoundManager with access to embedded ItemChanger wavs.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SoundManager.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a SoundManager to lazily load and cache AudioClips from the embedded wav files in the specified assembly.
            <br/>Only filepaths with the matching prefix are considered, and the prefix is removed to determine clip names (e.g. "ItemChanger.Resources.Audio." is the prefix for Instance).
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SoundManager.GetAudioClip(System.String)">
            <summary>
            Fetches the AudioClip with the specified name. If it has not yet been loaded, loads it from embedded resources and caches the result.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SoundManager.PlayClipAtPoint(System.String,UnityEngine.Vector3)">
            <summary>
            Equivalent to the static PlayClipAtPoint, composed with GetAudioClip.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SoundManager.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3)">
            <summary>
            Creates an AudioSource component at the specified point with generally applicable settings, and plays the clip from that source.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SoundManager.SaveAs(UnityEngine.AudioClip,System.String)">
            <summary>
            Save the uncompressed 16-bit audio clip as a .WAV file.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SoundManager.FromStream(System.IO.Stream,System.String)">
            <summary>
            Convert the stream representing a 16-bit uncompressed .WAV file to an AudioClip.
            </summary>
        </member>
        <member name="F:ItemChanger.Internal.SoundManager.actors">
            <summary>
            The Actors AudioMixerGroup, from global resources. Used as the mixer for SoundManager.PlayClipAtPoint.
            </summary>
        </member>
        <member name="T:ItemChanger.Internal.SpriteManager">
            <summary>
            Class for managing loading and caching Sprites from png files.
            </summary>
        </member>
        <member name="P:ItemChanger.Internal.SpriteManager.Instance">
            <summary>
            The SpriteManager with access to embedded ItemChanger pngs.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SpriteManager.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a SpriteManager to lazily load and cache Sprites from the embedded png files in the specified assembly.
            <br/>Only filepaths with the matching prefix are considered, and the prefix is removed to determine sprite names (e.g. "ItemChangerMod.Resources." is the prefix for Instance).
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SpriteManager.GetSprite(System.String)">
            <summary>
            Fetches the Sprite with the specified name. If it has not yet been loaded, loads it from embedded resources and caches the result.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SpriteManager.Load(System.IO.Stream,UnityEngine.FilterMode)">
            <summary>
            Loads a sprite from the png file passed as a stream.
            </summary>
        </member>
        <member name="M:ItemChanger.Internal.SpriteManager.Load(System.Byte[],UnityEngine.FilterMode)">
            <summary>
            Loads a sprite from the png file passed as a byte array.
            </summary>
        </member>
        <member name="T:ItemChanger.BoxedSprite">
            <summary>
            ISprite wrapper for Sprite. Use only for items created and disposed at runtime--it is not serializable.
            </summary>
        </member>
        <member name="M:ItemChanger.ItemChangerMod.CreateSettingsProfile(System.Boolean)">
            <summary>
            Create default ItemChanger settings for the save. Required before all operations which modify settings data.
            </summary>
            <param name="overwrite">If settings data already exists, should it be overwritten?</param>
            <exception cref="T:System.InvalidOperationException">Settings have already been loaded.</exception>
        </member>
        <member name="M:ItemChanger.ItemChangerMod.CreateSettingsProfile(System.Boolean,System.Boolean)">
            <summary>
            Create default ItemChanger settings for the save, with an option for whether default modules should be automatically added. Required before all operations which modify settings data.
            </summary>
            <param name="overwrite">If settings data already exists, should it be overwritten?</param>
            <param name="createDefaultModules">If a new profile is created, should it include all default modules?</param>
            <exception cref="T:System.InvalidOperationException">Settings have already been loaded.</exception>
        </member>
        <member name="M:ItemChanger.ItemChangerMod.CreateSettingsProfile(ItemChanger.Settings)">
            <summary>
            Create a settings profile from an existing Settings object (e.g. settings loaded from an external serialized source).
            </summary>
            <param name="settings">The Settings object to save to local settings.</param>
            <exception cref="T:System.InvalidOperationException">Settings have already been loaded.</exception>
        </member>
        <member name="M:ItemChanger.ItemChangerMod.AddTransitionOverride(ItemChanger.Transition,ItemChanger.ITransition)">
            <summary>
            Adds the override to SaveSettings. Overwrites any existing override for source.
            </summary>
        </member>
        <member name="M:ItemChanger.ItemChangerMod.AddDeployer(ItemChanger.IDeployer)">
            <summary>
            Add an event to instantiate an object at a given place to Settings. Primarily used for adding platforms, and similar preloaded objects.
            </summary>
        </member>
        <member name="M:ItemChanger.ItemChangerMod.AddPlacements(System.Collections.Generic.IEnumerable{ItemChanger.AbstractPlacement},ItemChanger.PlacementConflictResolution)">
            <summary>
            Adds placements to local settings, with handling for placements with the same name.
            </summary>
            <param name="placements">The placements to add to the local settings.</param>
            <param name="conflictResolution">The action if a placement already exists in settings with the same name.</param>
        </member>
        <member name="T:ItemChanger.Items.AddGeoItem">
            <summary>
            Item which directly adds geo to the inventory.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.BoolItem">
            <summary>
            Item which sets a PlayerData bool to the specified value.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.CharmItem">
            <summary>
            Item which gives the charm with the corresponding charmNum.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.CustomSkillItem">
            <summary>
            Item which ensures that the corresponding custom skill module is enabled on load, and otherwise acts as a BoolItem.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.DirtmouthStagItem">
            <summary>
            Item which sets the flags to open the Dirtmouth stag door, and additionally sends the event to open the door if in the corresponding scene.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.DreamerItem">
            <summary>
            Item which sets all of the flags triggered when the corresponding dreamer would be obtained.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.EssenceItem">
            <summary>
            Item which gives the specified amount of essence.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.GeoRockItem">
            <summary>
            Item which spawns the specified amount of geo, and requests a geo rock container of the specified GeoRockSubtype.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.Grimmchild1Item">
            <summary>
            Item which gives Grimmchild and activates the Nightmare Lantern.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.Grimmchild2Item">
            <summary>
            Item which gives Grimmchild, activates the Nightmare Lantern, and auto-completes the first two flame collection quests.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.GrubItem">
            <summary>
            Item which gives a grub and requests a Grub Jar container.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.IntItem">
            <summary>
            Item which increments a PlayerData field by the specified amount.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.IsmaItem">
            <summary>
            BoolItem which sends an event for acid pools to recheck whether the player has Isma's Tear.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.JournalEntryItem">
            <summary>
            Item which fully unlocks and completes the corresponding entry of the Hunter's Journal.
            </summary>
        </member>
        <member name="F:ItemChanger.Items.JournalEntryItem.playerDataName">
            <summary>
            If the journal entry corresponds to fields "killed{name}", "kills{name}", and "newData{name}", then this field is "{name}"
            </summary>
        </member>
        <member name="T:ItemChanger.Items.LifebloodItem">
            <summary>
            Item which gives the specified amount of blue health.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.LoreItem">
            <summary>
            Item which plays a lore sound when the context does not support sending up a lore prompt.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.MapItem">
            <summary>
            BoolItem which unlocks the map panel and opens Iselda.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.MapMarkerItem">
            <summary>
            BoolItem which unlocks the map and marker panels and opens Iselda.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.MapPinItem">
            <summary>
            BoolItem which unlocks the map and map pin panels, triggers a map update, and opens Iselda.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.MaskShardItem">
            <summary>
            Item which gives the specified number of mask shards.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.MimicItem">
            <summary>
            Item which plays the MimicScream clip if the placement did not use a mimic container.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.MultiBoolItem">
            <summary>
            Item which sets each of the provided PlayerData fields to true.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.NailUpgradeItem">
            <summary>
            Item designed to be compatible with Nailsmith upgrades and quest.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.RelicItem">
            <summary>
            Item which increments the number of relics for the specified trinketNum in [1,2,3,4] and makes the number of relics visible in the menu.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.ShadeCloakItem">
            <summary>
            MultiBoolItem which sends an event for ShadowGateColliderControls to recheck whether the player has Shade Cloak.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.SoulItem">
            <summary>
            Item which spawns a certain amount of soul, and requests a soul totem container.
            </summary>
        </member>
        <member name="F:ItemChanger.Items.SoulItem.soul">
            <summary>
            The amount of soul to be given. This will be rounded up to the next even integer if given through spawned soul orbs.
            </summary>
        </member>
        <member name="F:ItemChanger.Items.SoulTotemItem.hitCount">
            <summary>
            The number of hits to contribute to the soul totem. A negative number will result in an infinite totem.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.SpawnGeoItem">
            <summary>
            Item which spawns a specified amount of geo.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.SpawnLumafliesItem">
            <summary>
            Item which spawns escaped lumaflies.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.SpellItem">
            <summary>
            Item which increments a spell level and sets the hasSpell bool.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.StagItem">
            <summary>
            Item which sets the specified field true and increments the number of unlocked stag stations toward Stag Nest.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.UnbreakableCharmItem">
            <summary>
            CharmItem which gives the unbreakable version of the charm.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.VesselFragmentItem">
            <summary>
            Item which gives the specified number of vessel fragments.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.VoidItem">
            <summary>
            Item which does nothing.
            </summary>
        </member>
        <member name="T:ItemChanger.Items.WhiteFragmentItem">
            <summary>
            Item which sets all of the flags associated to its royalCharmLevel (e.g. L/R White Fragment, Kingsoul, Void Heart)
            </summary>
        </member>
        <member name="M:ItemChanger.LanguageKey.#ctor(System.String)">
            <summary>
            Create an LanguageKey which matches any call with this key.
            </summary>
        </member>
        <member name="M:ItemChanger.LanguageKey.#ctor(System.String,System.String)">
            <summary>
            Create an LanguageKey which matches any call with this sheet and key.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.AutoLocation">
            <summary>
            Location type which cannot accept a container, and thus must implement itself. Examples include items given in dialogue, etc.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.ContainerLocation">
            <summary>
            Location type which supports placing multiple kinds of objects.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.CoordinateLocation">
            <summary>
            Location which places a container at a specified coordinate position.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.DualLocation">
            <summary>
            Helper location meant to be unpacked into a DualPlacement
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.EnemyFsmLocation">
            <summary>
            /A variant of EnemyLocation which accounts for the fact that some enemies may not be loaded at activeSceneChanged, and are easier to locate by fsm.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.EnemyLocation">
            <summary>
            A location for modifying an enemy to drop an item container on death.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.ExistingContainerLocation">
            <summary>
            An abstract location which can be optionally replaced with a container, but has a natural way of giving items if not replaced.
            </summary>
        </member>
        <member name="P:ItemChanger.Locations.ExistingContainerLocation.HandlesCostBeforeContainer">
            <summary>
            Returns true if the placement does not need to choose a container that supports costs because the location will manage the cost separately.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.ExistingFsmContainerLocation">
            <summary>
            A location for modifying an object with an fsm in-place with the specified Container.
            </summary>
        </member>
        <member name="F:ItemChanger.Locations.ExistingFsmContainerLocation.replacePath">
            <summary>
            The path to find the object on active scene change, if it is to be replaced. If this is null, replacement happens when the fsm is enabled instead.
            </summary>
        </member>
        <member name="P:ItemChanger.Locations.ExistingFsmContainerLocation.HintActive">
            <summary>
            Creates a HintBox at the transform of the existing container or its replacement.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.FsmObjectLocation">
            <summary>
            ObjectLocation which replaces an FsmGameObject.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.ILocalHintLocation">
            <summary>
            Interface for locations which support a nearby toggleable item preview.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.ObjectLocation">
            <summary>
            Base type for finding and replacing a game object with an item container.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.PlaceableLocation">
            <summary>
            Base type for ContainerLocations which support receiving receiving a container at a placement-controlled time and manner.
            </summary>
        </member>
        <member name="F:ItemChanger.Locations.PlaceableLocation.managed">
             <summary>
             A managed ContainerLocation receives its container through PlaceContainer, rather than by requesting it in GetContainer.
             </summary>
            
        </member>
        <member name="T:ItemChanger.Locations.ShopLocation">
            <summary>
            Location for modifying any of the vanilla shops.
            </summary>
        </member>
        <member name="F:ItemChanger.Locations.ShopLocation.objectName">
            <summary>
            The npc's objectName, for spawning items.
            </summary>
        </member>
        <member name="F:ItemChanger.Locations.ShopLocation.defaultShopItems">
            <summary>
            If more than one placement modifies the same shop, the intersection of all default shop items are kept.
            </summary>
        </member>
        <member name="F:ItemChanger.Locations.ShopLocation.requiredPlayerDataBool">
            <summary>
            If this field is set, the PlayerData requirement to appear in stock is applied to all items at this location in addition to any item-specific requirements.
            </summary>
        </member>
        <member name="M:ItemChanger.Locations.ShopLocation.EditShopControl(PlayMakerFSM)">
            <summary>
            Change how the shop stock is constructed.
            </summary>
        </member>
        <member name="M:ItemChanger.Locations.ShopLocation.EditItemListControl(PlayMakerFSM)">
            <summary>
            Change how the shop stock is presented.
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:ItemChanger.Locations.ShopLocation.EditConfirmControl(PlayMakerFSM)">
            <summary>
            Change the effects of purchasing a shop item.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.AbyssShriekLocation">
            <summary>
            Location for giving items through the Abyss Shriek cutscene.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.BasinFountainLocation">
            <summary>
            FsmObjectLocation with text and fsm edits for spawning an item from the donation fountain.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.BossEssenceLocation">
            <summary>
            Location for giving an item from talking to the defeated boss ghost.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.BroodingMawlekLocation">
            <summary>
            FsmObjectLocation with fsm edits for spawning an item from the Brooding Mawlek fight.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.BrummFlameLocation">
            <summary>
            Location which gives items when Brumm's Grimmkin flame would be received.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.ColosseumLocation">
            <summary>
            FsmObjectLocation with various changes to support items at the end of a Colosseum trial.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.CorniferLocation">
            <summary>
            Location which gives items through the interface to purchase a map from Cornifer.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.CostChestLocation">
            <summary>
            Wrapper location to allow converting a ContainerLocation, PlaceableLocation pair to a CostChestPlacement.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DescendingDarkLocation">
            <summary>
            Location which gives items directly upon shattering the Crystal Shaman.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DesolateDiveLocation">
            <summary>
            FsmObjectLocation with various changes to support being spawned from the Quake Pickup after Soul Master.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DivineLocation">
            <summary>
            Location which replaces the shinies inside Divine's room. Each of the 3 shinies requires its own location with this implementation.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DreamBossLocation">
            <summary>
            Boss Essence location which applies to dream bosses and supports respawning items.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DreamerLocation">
            <summary>
            ObjectLocation which places an item within the Dreamer's dream and supports a HintBox outside the dream.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DreamNailLocation">
            <summary>
            ObjectLocation which makes a minor change to the Dream Nail sequence to prevent Unity error logs.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.DreamWarriorLocation">
            <summary>
            Boss Essence location which applies to dream warriors and supports respawning items.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.EggShopLocation">
            <summary>
            Wrapper location to allow converting a PlaceableLocation to an EggShopPlacement (instead of MutablePlacement)
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.GodtunerLocation">
            <summary>
            ObjectLocation which places an item inside the Godseeker's coffin and supports a hint through the coffin's inspect text.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.GreyMournerLocation">
            <summary>
            FsmObjectLocation with edits to support dropping from the Grey Mourner and giving a hint when the Delicate Flower is offered.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.GreyPrinceZoteLocation">
            <summary>
            Boss Essence Location which supports a hint from reading Bretta's Diary.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.GrimmkinLocation">
            <summary>
            Location for modifying the unique Grimmkin spawn of a scene.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.GruzMotherDropLocation">
            <summary>
            ContainerLocation for dropping an item when Gruz Mother is killed.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.HuntersJournalLocation">
            <summary>
            ObjectLocation which replaces the Hunter's Journal shiny.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.KingFragmentLocation">
            <summary>
            ObjectLocation which supports a hint at the Kingsmould corpse in Abyss_05 and triggers a scene change to Abyss_05 when its items are obtained.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.KingsBrandLocation">
            <summary>
            ObjectLocation which prevents the King's Brand avalanche sequence from occuring.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.LoreTabletLocation">
            <summary>
            ObjectLocation which replaces a lore tablet and must disable its inspect region.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.MothwingCloakLocation">
            <summary>
            FsmObjectLocation with changes to prevent the dreamer cutscene after the Hornet 1 fight.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.NailmasterLocation">
            <summary>
            Location which gives items when a Nailmaster would teach their nail art.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.NailmastersGloryLocation">
            <summary>
            Location which gives an item through Sly Basement dialogue, and triggers a scene change to Dirtmouth.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.NailmastersGloryObjectLocation">
            <summary>
            ObjectLocation which places a shiny which triggers a scene change to Dirtmouth. Expects no other shinies are placed in Room_Sly_Storeroom.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.QueenFragmentLocation">
            <summary>
            ObjectLocation which modifies an additional shiny holder fsm related to the Queen Fragment.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.SealOfBindingLocation">
            <summary>
            Location which gives items when watching the cutscene at the end of Path of Pain.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.ShadeCloakLocation">
            <summary>
            Location with directly gives items after entering the Shade Cloak dish platform.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.ShadeSoulLocation">
            <summary>
            Location which directly gives items after interacting with the vanilla Shade Soul location.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.StagLocation">
            <summary>
            CoordinateLocation which also edits the stag by removing the toll and allowing use of the stag without unlocking the station.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.TukDefendersCrestLocation">
            <summary>
            AutoLocation which modifies Tuk to give items through a flung shiny when the player has a certain charm equipped (by default, Defender's Crest).
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.VengefulSpiritLocation">
            <summary>
            FsmObjectLocation which replaces Vengeful Spirit and disables the Ancestral Mound trap sequence.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.VoidHeartLocation">
            <summary>
            Location which directly gives items in place of Void Heart following the Dream_Abyss sequence.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.SpecialLocations.WhisperingRootLocation">
            <summary>
            Location which prevents DreamPlantOrbs from giving essence and gives items directly after completing the whispering root. Supports a HintBox around the whispering root.
            </summary>
        </member>
        <member name="T:ItemChanger.Locations.StartLocation">
            <summary>
            Location for giving items at the start of the scene, late enough that they appear on the UI and soul is not removed if during respawn.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.AltCorniferAtHomeTest">
            <summary>
            Nondefault module added automatically by CorniferLocations. Ties CorniferAtHome to all CorniferLocations having been purchased.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.AltNailsmithSheoTest">
            <summary>
            Nondefault module added by a NailmasterLocation in Room_Nailmaster_02. Ties PD.nailsmithSheo to having accepted Sheo's offer.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.AutoSalubraNotches">
            <summary>
            Module which gives the notches originally sold by Salubra when the corresponding number of charms has been obtained.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.BaldurHealthCap">
            <summary>
            Module which sets Baldur hp to the specified value and allows Baldurs to spit before Vengeful Spirit is obtained.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.BlueDoorUnlock">
            <summary>
            Module which changes the blue hp threshold for the LBC door to the specified value. TransitionFixes handles opening the door when entering from behind.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.CliffsShadeSkipAssist">
            <summary>
            Module which removes scenery objects above the chest above Baldur shell, to make the passage to Howling Cliffs visible.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.CompletionPercentOverride">
            <summary>
            Configurable module that overrides the completion percentage.
            Items and Placements will be weighted according to their CompletionWeightTag.
            Transition weights are set in the module.
            By default, finding an item increases the total by 1/(#items at placement),
            and finding a transition X->Y, Y->X pair increases the total by 1.
            </summary>
        </member>
        <member name="P:ItemChanger.Modules.CompletionPercentOverride.NormalizePlacementCounts">
            <summary>
            If this is true, items will be scaled so that placements have total weight equal to their tag (or 1).
            </summary>
        </member>
        <member name="P:ItemChanger.Modules.CompletionPercentOverride.CoupledTransitions">
            <summary>
            If this is true, finding transition X -> Y will mark both X and Y as found.
            Otherwise, just X will be marked.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.CumulativeRancidEggCost">
            <summary>
            Subtractive rancid egg cost which adjusts for the number of eggs previously spent on this type of cost.
            </summary>
        </member>
        <member name="M:ItemChanger.Modules.CumulativeRancidEggCost.#ctor(System.Int32)">
            <summary>
            Subtractive rancid egg cost which adjusts for the number of eggs previously spent on this type of cost.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.CumulativeEggCostModule">
            <summary>
            Module which tracks the number of rancid eggs that have been spent via CumulativeRancidEggCost.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.DisablePalaceMidWarp">
            <summary>
            Module which causes dreamnailing the Kingsmould corpse in Palace Grounds to always warp the knight to White_Palace_11.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.DreamNailCutsceneEvent">
            <summary>
            Module which modifies the Dream Nail cutscene to be independent of having the Dream Nail item.
            </summary>
        </member>
        <member name="F:ItemChanger.Modules.DreamNailCutsceneEvent.Closed">
            <summary>
            If evaluates true, interacting with the plaque no longer warps. If null, plaque always warps.
            <br/>Default test is true iff "Dream_Nail" placement exists and is cleared or "Dream_Nail" placement does not exist and player has Dream Nail.
            </summary>
        </member>
        <member name="F:ItemChanger.Modules.DreamNailCutsceneEvent.Passible">
            <summary>
            If true, the binding shield is not activated.
            </summary>
        </member>
        <member name="F:ItemChanger.Modules.DreamNailCutsceneEvent.Faster">
            <summary>
            If true, the plaque inspection/cutscene is skipped and interacting warps instantly.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.ElevatorPass">
            <summary>
            Module which implements the Elevator Pass custom skill.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.FastGrubfather">
            <summary>
            Module which edits Grubfather to give all unlocked rewards at once.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.FixFury">
            <summary>
            Module which makes Fury of the Fallen compatible with max hp 1.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.FocusSkill">
            <summary>
            Module which implements the Focus custom skill.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.GatedGrimmTent">
            <summary>
            Module which adds a gate in Grimm_Main_Tent when the Nightmare Lantern has not been lit.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.GrimmkinFlameManager">
            <summary>
            Module which overrides the PlayerData.flamesCollected field to ensure having more than 3 flames is compatible with the Grimm quest.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.FlameCost">
            <summary>
            A Grimmkin Flame cost with options to act cumulatively.
            </summary>
            <param name="amount">The number of flames.</param>
            <param name="cumulative">Should the cost compare against the cumulative flames collected, or the current balance?</param>
            <param name="subtractive">Should paying the cost increment the cumulative flames spent, and decrease the current balance?</param>
        </member>
        <member name="M:ItemChanger.Modules.FlameCost.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            A Grimmkin Flame cost with options to act cumulatively.
            </summary>
            <param name="amount">The number of flames.</param>
            <param name="cumulative">Should the cost compare against the cumulative flames collected, or the current balance?</param>
            <param name="subtractive">Should paying the cost increment the cumulative flames spent, and decrease the current balance?</param>
        </member>
        <member name="T:ItemChanger.Modules.HorizontalTransitionQuakeCancel">
            <summary>
            Module which prevents glitches from diving into a bot -> non-top transition.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.InventoryTracker">
            <summary>
            Module which adds extra information to the inventory for grubs, dreamers, and similar things that cannot otherwise be checked.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.JijiJinnPassage">
            <summary>
            Module which causes Room_Ouiji[left1] to lead to Room_Jinn[left1], and Room_Jinn[left1] to lead to the target of Room_Ouiji[left1].
            The passage is created when entering Jiji or Jinn's hut for the first time.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.LeftCityChandelier">
            <summary>
            Module which makes a chandelier in left City of Tears pogoable, restoring a skip that was removed when Ruins1_05 was split into two rooms in the Lifeblood update.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.MenderbugUnlock">
            <summary>
            Module which unlocks the door to Menderbug's house by default.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.Module">
            <summary>
            Base type for classes which perform self-contained changes that should be applied when a save is created or continued and disabled when the save is unloaded.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.DefaultModuleAttribute">
            <summary>
            Attribute which marks that a module should be included automatically in a new save. This functionality only applies to types declared in the ItemChangerMod assembly.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.NonlinearColosseums">
            <summary>
            Module which unlocks the Colosseum boards and makes it possible to interact with them regardless of which trials have been completed.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.NotchCostUI">
            <summary>
            Nondefault module which causes the notch cost to be displayed after a charm's name, when sent through a LanguageString.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.PlayerDataEditModule">
            <summary>
            Module which stores requested PlayerData changes and applies them when the save is loaded. Useful for ensuring those changes are applied if the same IC data is stored and loaded with a new save.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.PreventGrimmTroupeLeave">
            <summary>
            Module which prevents the Grimm and Divine tents from leaving Dirtmouth.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.PreventLegEaterDeath">
            <summary>
            Module which prevents Leg Eater from leaving when Divine's questline is finished.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.PreventSeerLeaveDreamgate">
            <summary>
            Default module which removes the failsafe that gives Dream Gate automatically in saves where the Seer has ascended.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.PreventZoteDeath">
            <summary>
            Module which prevents Zote from dying for any reason.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.RemoveInfectedBlockades">
            <summary>
            Module which completely removes all four blockades from Infected Crossroads.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.RemoveVoidHeartEffects">
            <summary>
            Module which makes Void Heart unequippable and makes Siblings and the Shade hostile when Void Heart is not equipped.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.RespawnCollectorJars">
            <summary>
            Module which makes the glass jars in the Collector's room respawn after breaking.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.ReusableBeastsDenEntrance">
            <summary>
            Module which allows the bench entrance to Beast's Den to be reused, and prevents its hard save.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.ReusableCityCrestGate">
            <summary>
            Module which allows the City Crest gate to be reused, and prevents its hard save.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.ReverseBeastDenPath">
            <summary>
            Module which allows the deepest part of Beast's Den to be reached from the secret shortcut, by destroying the breakable floor above the grub.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.ReversePathOfPainSaw">
            <summary>
            Module which adds saws to the first room of Path of Pain to allow it to be traversed in reverse.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.RightCityPlatform">
            <summary>
            Module which adds a platform to Right City, replacing a Great Husk Sentry pogo that was removed when its patrol range was changed in the Lifeblood update.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SlyBasementEvent">
            <summary>
            Module which sets the Sly Basement event to occur when the player has 3 nail arts, independently of Nailmaster's Glory. Makes room in the shop for Sly and the basement entrance.
            </summary>
        </member>
        <member name="F:ItemChanger.Modules.SlyBasementEvent.Closed">
            <summary>
            If evaluates true, Sly's basement will no longer be available.
            <br/>If null, defaults to PD.gotSlyCharm (which is always false when the standard NMG location is used, and in vanilla is set in Dirtmouth when NMG is in inventory).
            <br/>Default test is true iff "Nailmaster's_Glory" placement exists and is cleared, or no such placement exists and PD.gotSlyCharm is true.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SlyRescuedEvent">
            <summary>
            Module which manages whether Sly has been rescued independently of PlayerData, and prevents Sly from appearing in the shop before being rescued. 
            <br />The PlayerData bool instead solely controls whether the door to the shop is unlocked.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SplitClaw">
            <summary>
            Module which implements the split claw custom skills.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SplitCloak">
            <summary>
            Module which implements the split cloak custom skills.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SplitNail">
            <summary>
            Module which implements the split nail custom skills.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SplitSuperdash">
            <summary>
            Module which implements the split superdash custom skills.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.SwimSkill">
            <summary>
            Module which implements the swim custom skill.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.TransitionFixes">
            <summary>
            Module which applies a large number of fixes to allow entering rooms from unintended directions.
            </summary>
        </member>
        <member name="F:ItemChanger.Modules.TransitionFixes.ExcludedTransitionFixes">
            <summary>
            Fixes targeted at Transitions in this collection will be ignored.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.WaterHazardRespawns">
            <summary>
            Module which adds extra hazard respawn markers to rooms that ordinarily don't contain hazards, but do contain water which can become hazardous without Swim.
            </summary>
        </member>
        <member name="T:ItemChanger.Modules.ZeroCostCharmEquip">
            <summary>
            Module that allows 0 cost charms to be equipped at any time.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.AutoPlacement">
            <summary>
            Placement for self-implementing locations, usually acting through cutscene or conversation fsms.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.CostChestPlacement">
            <summary>
            Placement which allows shop-like behavior, with a tablet showing item names and costs near a chest. 
            <br />When the chest is opened, any costs that can be paid are paid and the corresponding items are spawned.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.DualPlacement">
            <summary>
            Placement which handles switching between two possible locations according to a test.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.EggShopPlacement">
            <summary>
            Placement which implements a shop at Jiji. 
            <br />Talking to Jiji gives the option to pay costs, and choosing to do so leads to Jiji spawning the corresponding items wrapped in individual containers.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.ExistingContainerPlacement">
            <summary>
            Placement which supports modifying existing containers in place or replacing them with a container preferred by the item list.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.IContainerPlacement">
            <summary>
            Interace for placements which can be used by ContainerLocation. In other words, on demand the placement returns an object which is capable of giving its items.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.IMultiCostPlacement">
            <summary>
            Empty interface which indicates that the placement expects costs to be tagged to items.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.IPrimaryLocationPlacement">
            <summary>
            Interface for accessing the primary location of a placement, if it has one.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.ISingleCostPlacement">
            <summary>
            Interface which indicates that placement expects all items to share a common cost.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.MutablePlacement">
            <summary>
            The default placement for most use cases.
            Chooses an item container for its location based on its item list.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.IShopPlacement">
            <summary>
            Interface which exposes the stock methods of ShopPlacement for use by ShopLocation.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.ShopPlacement">
            <summary>
            Placement which handles ShopLocation. Its main role is to handle adding its items to the shop stock as objects with the ModShopItemStats component.
            </summary>
        </member>
        <member name="T:ItemChanger.Placements.YNShinyPlacement">
            <summary>
            Variant of MutablePlacement which only uses the shiny container type.
            </summary>
        </member>
        <member name="F:ItemChanger.StartDefs.RelativeStartDef.objPath">
            <summary>
            The full path to the GameObject, with '/' separators.
            </summary>
        </member>
        <member name="T:ItemChanger.StartDefs.TransitionBasedStartDef">
            <summary>
            Accounts for the fact that transitions are not consistently placed as root gameobjects
            </summary>
        </member>
        <member name="M:ItemChanger.StartDefs.TransitionBasedStartDef.FromGate(System.String,System.String,System.Int32)">
            <summary>
            Attempts to find a start location near the corresponding transition. Unlikely to succeed for bottom transitions.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.ChangeSceneTag">
            <summary>
            Tag which certain placements or locations may use to add a scene change after obtaining items.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DestroyFsmTag">
            <summary>
            Tag which destroys an object when an attached fsm activates.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DestroyGrubRewardTag">
            <summary>
            Tag for destroying grub rewards according to the flags of the enumeration.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DestroyObjectTag">
            <summary>
            Tag for destroying an object in a specific scene. Can search by name or by path.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DestroySeerRewardTag">
            <summary>
            Tag for destroying Seer rewards according to the flags of the enumeration.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DisableCostPreviewTag">
            <summary>
            Tag which can be placed on placements or items to redact cost details from previews.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DisableFsmTag">
            <summary>
            Tag which clears actions and transitions from a state when the attached fsm activates.
            <br/>If a state is not specified, disables the Pause, Init, and Idle states if they exist.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.DisableItemPreviewTag">
            <summary>
            Tag which can be placed on placements or items to redact item names from previews.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.EquipCharmOnGiveTag">
            <summary>
            Tag applied to a charm item so that the charm is equipped when given.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.ImplicitCostTag">
            <summary>
            A tag which does not modify behavior, but provides information about the implicit costs of a placement or location.
            </summary>
        </member>
        <member name="F:ItemChanger.Tags.ImplicitCostTag.Inherent">
            <summary>
            An inherent cost always applies. A non-inherent cost applies as a substitute when the placement does not have a (non-null) cost.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.IInteropTag">
            <summary>
            An interface implemented by tags for sharing information between assemblies that do not strongly reference each other.
            </summary>
        </member>
        <member name="P:ItemChanger.Tags.IInteropTag.Message">
            <summary>
            A description of the tag that can be recognized by consumers.
            </summary>
        </member>
        <member name="M:ItemChanger.Tags.IInteropTag.TryGetProperty``1(System.String,``0@)">
            <summary>
            Returns true if the property name corresponds to a non-null value of the specified type, and outputs the casted value.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.InteropTag">
            <summary>
            Tag which provides the default implementation of IInteropTag.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.IPersistenceTag">
            <summary>
            Interface used when ItemChanger checks tags to determine whether an item is persistent or semipersistent, and should be refreshed.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.IShopRemovalTag">
            <summary>
            Interface for tags used by shops to determine special conditions upon which an item should be removed from stock.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.IShopRequirementTag">
            <summary>
            Interface for tags used by shops to determine special conditions which must be met before an item appears in stock.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.ItemChainTag">
            <summary>
            Tag which triggers a recursive search through the AbstractItem.ModifyItem hook.
            <br />Recursion is by looking up the predecessor and successor items in Finder, and basing a search at their ItemChainTags.
            <br />Selected item is first nonredundant item in the sequence, or null (handled by AbstractItem) if all items are redundant.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.ItemTreeTag">
            <summary>
            Tag which carries ordered lists of predecessors and successors item names.
            <br/>Hooks AbstractItem.ModifyItem, and returns the first item in the sequence which is not redundant.
            <br/> Note that unlike ItemChainTag, this does not recursively check tags of the predecessors and successors.
            </summary>
        </member>
        <member name="F:ItemChanger.Tags.ItemTreeTag.strictEvaluation">
            <summary>
            If true, the first nonredundant item starting from the first element in the list will be chosen.
            <br/>Otherwise, the search will begin at the parent item, and will assume that predecessors of a redundant item are redundant.
            <br/>Only relevant when predecessors is nonempty.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.MultiPreviewRecordTag">
            <summary>
            Tag which contains preview information for each item of a multi cost placement.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.PDBoolShopRemoveTag">
            <summary>
            Tag which indicates that an item should be removed from the shop's stock if the PlayerData bool evaluates to the specified value.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.PDBoolShopReqTag">
            <summary>
            Tag which indicates that an item should only appear in the shop's stock if the PlayerData bool evaluates to the specified value.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.PDIntShopReqTag">
            <summary>
            Tag which indicates that an item should only appear in the shop's stock if the specified PlayerData int comparison succeeds.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.PersistentItemTag">
            <summary>
            Tag which indicates an item has a fixed persistence.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.PreferredDefaultContainerTag">
            <summary>
            Tag for location or placement which indicates a preferred container type to use if no items request a specific container.
            <br/>Note that the default container without a tag is usually Shiny for one item or Chest for multiple items.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.PreviewRecordTag">
            <summary>
            Placement tag which stores a record of the information shared in the most recent preview of a single cost placement.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.SetPDBoolOnGiveTag">
            <summary>
            Tag which adds setting a PlayerData bool as a side effect to an item.
            <br/>Be warned that this effect is tied to the tag's parent, regardless of how it is modified during Give.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.SetPDBoolOnLoadTag">
            <summary>
            Tag which sets a PlayerData bool when loaded.
            </summary>
        </member>
        <member name="T:ItemChanger.Tags.UnsupportedContainerTag">
            <summary>
            Tag for a location or placement to indicate that a container is not supported and should not be chosen.
            </summary>
        </member>
        <member name="T:ItemChanger.CostTag">
            <summary>
            Tag used for carrying information about costs, particularly for items in a shop or other multicost placement.
            </summary>
        </member>
        <member name="T:ItemChanger.IShopNotchCostTag">
            <summary>
            Interface used by shops to determine whether an item has a notch cost that should be displayed.
            <br />The notch cost of a CharmItem or EquippedCharmItem is displayed even if it does not have this tag.
            </summary>
        </member>
        <member name="T:ItemChanger.UIDefs.BigUIDef">
            <summary>
            UIDef which produces a full-screen message using BigItemPopup if possible, otherwise defaulting to the action of MsgUIDef.
            </summary>
        </member>
        <member name="T:ItemChanger.UIDefs.LoreUIDef">
            <summary>
            UIDef which starts a text conversation with the specified text and type, otherwise defaulting to the action of MsgUIDef.
            </summary>
        </member>
        <member name="T:ItemChanger.UIDefs.MsgUIDef">
            <summary>
            The standard UIDef. SendMessage results in a sprite and the postview name appearing in the bottom left corner.
            </summary>
        </member>
        <member name="T:ItemChanger.UIDefs.SplitUIDef">
            <summary>
            A MsgUIDef with distinct preview and postview names.
            </summary>
        </member>
        <member name="M:ItemChanger.Util.ItemUtility.GiveSequentially(System.Collections.Generic.IEnumerable{ItemChanger.AbstractItem},ItemChanger.AbstractPlacement,ItemChanger.GiveInfo,System.Action)">
            <summary>
            Gives each unobtained item from the collection (asynchronously), and executes the callback after the final item.
            </summary>
        </member>
        <member name="M:ItemChanger.Util.ShinyUtility.MakeNewShiny(ItemChanger.AbstractPlacement,ItemChanger.AbstractItem,ItemChanger.FlingType)">
            <summary>
            Makes a Shiny Item with a name tied to location and item index. Apply FSM edits in OnEnable instead.
            </summary>
        </member>
        <member name="M:ItemChanger.Util.ShinyUtility.AddYNDialogueToShiny(PlayMakerFSM,ItemChanger.Cost,ItemChanger.AbstractPlacement,System.Collections.Generic.IEnumerable{ItemChanger.AbstractItem})">
            <summary>
            Call after ModifyShiny to add cost.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
    </members>
</doc>
